name: CI
on:
  push:
  pull_request:
jobs:
  pre-commit:
    name: pre-commit (ubuntu-latest, 3.7)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Update pip, setuptools, and wheel
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Install pylint
        run: python -m pip install pylint==2.5.3
      - name: Run pre-commit
        uses: pre-commit/action@v2.0.0
        #with:
        #  token: ${{ secrets.GITHUB_TOKEN }}
  lint:
    needs:
      - pre-commit
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - 3.7
          - 3.8
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            ~/.cache/pypoetry
          key: ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-
      - name: Cache dependencies (MacOS)
        if: startsWith(matrix.os, 'macos')
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/pip
            ~/.cache/pre-commit
            ~/Library/Caches/pypoetry
          key: ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-
      - name: Cache dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v2
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\.cache\pre-commit
            ~\AppData\Local\pypoetry\Cache
          key: ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-${{ hashFiles('poetry.lock', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-python-${{ matrix.python-version }}-2x6-
      - name: Update pip, setuptools, and wheel
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v2
      - name: Install with dependencies
        run: |
          poetry install
          poetry show
      - name: Run flake8 and pylint via pre-commit
        run: |
          poetry run pre-commit run flake8 --all-files
          poetry run pre-commit run pylint --all-files
      - name: Build
        run: poetry build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }} ${{ matrix.python-version }} dist
          path: dist/
          if-no-files-found: error
  test-install:
    name: Test wheel install
    needs:
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest 3.7 dist
          path: dist
      - name: Install package from wheel
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install dist/*.whl
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - test-install
    runs-on: ubuntu-latest
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest 3.7 dist
          path: dist
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload assets
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
